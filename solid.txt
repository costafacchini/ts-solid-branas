SOLID

5 princípios

1 - SRP (Single Responsability Principle)

Separar coisas que mudam por motivos diferentes

Mover responsabilidades

2 - OCP

Open/Closes Principle

Devemos estar fechados para modificação e abertos para extensão do código

3 - Liskov Substitution Principle

Se S (Beer, Whisky, Water) é uma subclasse de T (Item), em um programa deve ser possível substituir instâncias de T (Item) por instâncias de S (Beer, Whisky, Water), SEM QUEBRAR O FUNCIONAMENTO DO PROGRAMA

Pré-condições não podem ser fortalecidas
Deixando de aceitar ENTRADAS que a superclasse considera válida.
Por exemplo uma classe pessoa aceita idade > 0 e uma classe empregado só aceita se for > 18.

Pós-condições não podem ser enfraquecidas
Deixando as saídas diferentes da expectativa de quem está chamando o método
Por exemplo a classe pessoa responder com uma exception num método que a subclasse responde com um número ou uma string.

Invariantes devem ser consistentes
Uma subclasse permitir que o estado conceitual da hierarquia de classes fique inválido.
Por exemplo a classe pessoa aceita idade > 0 e uma subclasse dela aceitar idade < 0.

4 - ISP

Interface Segregation Principle

Cuidado com interfaces MUITO ABRANGENTES, não obrigue subclasses a implementar métodos que elas não precisam
